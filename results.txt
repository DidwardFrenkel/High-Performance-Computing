Results:

Problem 1:
Latency: 0.000030 s. for 10 procs, N = 1000
Bandwidth: 0.588916 MB/s for 10 procs, N = 50

Problem 2:
All results below were done for 10 Jacobi iterations on N = 20:
p = 1
0.002265 0.006384 0.008844 0.010202 0.010871 0.011174 0.011287 0.011327 0.011336 0.011338 0.011338 0.011336 0.011329 0.011296 0.011214 0.010984 0.010505 0.009513 0.007742 0.004726 
p = 2
0.002265 0.006384 0.008844 0.010202 0.010871 0.011174 0.011287 0.011327 0.011336 0.011338 0.011338 0.011336 0.011329 0.011296 0.011214 0.010984 0.010505 0.009513 0.007742 0.004726 
p = 4
0.002265 0.006384 0.008844 0.010202 0.010871 0.011174 0.011287 0.011327 0.011336 0.011338 0.011338 0.011336 0.011329 0.011296 0.011214 0.010984 0.010505 0.009513 0.007742 0.004726 
p = 5
0.002265 0.006384 0.008844 0.010202 0.010871 0.011174 0.011287 0.011327 0.011336 0.011338 0.011338 0.011336 0.011329 0.011296 0.011214 0.010984 0.010505 0.009513 0.007742 0.004726 
p = 10
0.002265 0.006384 0.008844 0.010202 0.010871 0.011174 0.011287 0.011327 0.011336 0.011338 0.011338 0.011336 0.011329 0.011296 0.011214 0.010984 0.010505 0.009513 0.007742 0.004726 
p = 20
0.002265 0.006384 0.008844 0.010202 0.010871 0.011174 0.011287 0.011327 0.011336 0.011338 0.011338 0.011336 0.011329 0.011296 0.011214 0.010984 0.010505 0.009513 0.007742 0.004726 

A parallel version of the Gauss-Seidel smoother would be more difficult due to the need to continuously update the given vector u during processing. 
